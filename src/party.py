from database import MongoDB
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

class Party:
    def __init__(self, bot):
        self.database = MongoDB()
        self.bot = bot
        
    def create_party(self, party_name, party_creator):
        """ Create party in the database """
        return self.database.add_party(party_name, party_creator)
    
    def invite_to_party(self, user_id, inviter_id):
        """ –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∞—Ä—Ç–∏—é """
        party = self.database.find_party_id(inviter_id)  # –ò—â–µ–º –ø–∞—Ä—Ç–∏—é –ø–æ ID –≤–ª–∞–¥–µ–ª—å—Ü–∞
        
        if not party:
            return "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏!"
        
        if user_id in party["party_members"]:
            return "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –≤–∞—à–µ–π –ø–∞—Ä—Ç–∏–∏!"
        
        # –°–æ–∑–¥–∞—ë–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_invite:{party['party_name']}:{user_id}"),
            InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data="decline_invite")
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        self.bot.send_message(
            user_id,
            f"üì© –í–∞—Å –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –≤ –ø–∞—Ä—Ç–∏—é {party['party_name']}!\n–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ?",
            reply_markup=keyboard,
        )
        return f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∞—Ä—Ç–∏—é {party['party_name']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}!"
    
    def accept_invitation(self, party_name, user_id):
        """ –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø–∞—Ä—Ç–∏—é """
        return self.database.add_party_member(party_name, user_id)
    
    def remove_party_member(self, party_name, user_id):
        """ Remove user from the party """
        return self.database.remove_party_member(party_name, user_id)
    
    def get_party(self, party_name, message):
        """ Get party by name """
        party = self.database.find_party_name(party_name)
        party_creator = party.get("party_creator")
        party_creator = self.database.find_user_id(party_creator)
        message_bot = f"–ü–∞—Ä—Ç–∏—è {party_name}:\n–í–ª–∞–¥–µ–ª–µ—Ü: {party_creator['nickname']}\n–£—á–∞—Å—Ç–Ω–∏–∫–∏: {party['party_members']}\n–ì—Ä–µ—á–∫–∞: {party['grechka']} –∫–≥"
        self.bot.reply_to(message, message_bot)
    
    def buy_grechka(self, party_creator_id, amount):
        party = self.database.find_party_id(party_creator_id)
        if not party:
            return "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏!"
        if amount <= 0:
            return "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–µ—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!"
        
        cost = amount * 30
        
        user = self.database.find_user_id(party_creator_id)
        if not user:
            return "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!"
        
        user_coins = user.get("coins", 0)
        
        if user_coins < cost:
            return f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {amount} –∫–≥ –≥—Ä–µ—á–∫–∏! –¢—Ä–µ–±—É–µ—Ç—Å—è {cost} –º–æ–Ω–µ—Ç, –∞ —É –≤–∞—Å —Ç–æ–ª—å–∫–æ {user_coins} –º–æ–Ω–µ—Ç."
        
        current_grechka = party.get("grechka", 0)
        new_grechka = current_grechka + amount
        self.database.update_party(party["party_name"], grechka=new_grechka)
        
        new_user_coins = user_coins - cost
        self.database.update_user(party_creator_id, {"coins": new_user_coins})
        
        return f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∫—É–ø–∏–ª–∏ {amount} –∫–≥ –≥—Ä–µ—á–∫–∏ –¥–ª—è –ø–∞—Ä—Ç–∏–∏ {party['party_name']}! –í—Å–µ–≥–æ –≤ –ø–∞—Ä—Ç–∏–∏ —Ç–µ–ø–µ—Ä—å {new_grechka} –∫–≥. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_user_coins} –º–æ–Ω–µ—Ç."
    
    def distribute_grechka_to_all(self, party_creator_id, amount_per_user):
        """ –†–∞–∑–¥–∞—ë—Ç –≥—Ä–µ—á–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–∞ –∫–∞–∂–¥–æ–≥–æ """
        if amount_per_user <= 0:
            return "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–µ—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º!"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∞—Ä—Ç–∏–∏
        party = self.database.find_party_id(party_creator_id)
        if not party:
            return "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏!"
        
        current_party_grechka = party.get("grechka", 0)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = self.database.find_users()
        total_users = len(users)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ –≥—Ä–µ—á–∫–∏ –Ω–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        required_grechka = amount_per_user * total_users
        
        if current_party_grechka < required_grechka:
            return f"‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≥—Ä–µ—á–∫–∏ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –ø–æ {amount_per_user} –∫–≥ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é! –£ –≤–∞—Å –≤—Å–µ–≥–æ {current_party_grechka} –∫–≥, –∞ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω—É–∂–Ω–æ {required_grechka} –∫–≥."
        
        # –†–∞–∑–¥–∞–µ–º –≥—Ä–µ—á–∫—É –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user in users:
            user_id = user["user_id"]
            current_grechka = user.get("grechka", 0)
            new_grechka = current_grechka + amount_per_user
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–µ—á–∫–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.database.update_user(user_id, {"grechka": new_grechka})
        
        # –£–º–µ–Ω—å—à–∞–µ–º –≥—Ä–µ—á–∫—É —É –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∞—Ä—Ç–∏–∏
        new_party_grechka = current_party_grechka - required_grechka
        self.database.update_party(party["party_name"], grechka=new_party_grechka)
        
        return f"‚úÖ –†–∞–∑–¥–∞–Ω–æ {required_grechka} –∫–≥ –≥—Ä–µ—á–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º! –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª –ø–æ {amount_per_user} –∫–≥. –£ –≤–ª–∞–¥–µ–ª—å—Ü–∞ –ø–∞—Ä—Ç–∏–∏ —Ç–µ–ø–µ—Ä—å {new_party_grechka} –∫–≥."
        
    def setup_party_handlers(self):
        @self.bot.message_handler(func=lambda message: message.text.lower().startswith("!—Å–æ–∑–¥–∞—Ç—å"))
        def create_party_handler(message):
            parts = message.text.split(maxsplit=1)  # –†–∞–∑–±–∏–≤–∞–µ–º –ø–æ –ø–µ—Ä–≤–æ–º—É –ø—Ä–æ–±–µ–ª—É
            if len(parts) != 2:
                return self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !—Å–æ–∑–¥–∞—Ç—å <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞—Ä—Ç–∏–∏>")
            
            party_name = parts[1]  # –ë–µ—Ä—ë–º –≤—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ "!—Å–æ–∑–¥–∞—Ç—å"
            party_creator = message.from_user.id
            print(party_name)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –ø–∞—Ä—Ç–∏—è
            existing_party = self.database.find_party_id(party_creator)
            if existing_party:
                return self.bot.reply_to(message, "‚ùå –í—ã —É–∂–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –¥—Ä—É–≥–æ–π –ø–∞—Ä—Ç–∏–∏!")

            result = self.create_party(party_name, party_creator)
            self.bot.reply_to(message, result)
            
        @self.bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower() == "!–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å")
        def invite_reply_handler(message):
            """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –ø–∞—Ä—Ç–∏—é (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) """
            replied_user_id = message.reply_to_message.from_user.id  # ID –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ
            inviter_id = message.from_user.id  # ID –ø—Ä–∏–≥–ª–∞—à–∞—é—â–µ–≥–æ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∞—Ä—Ç–∏–∏)
            
            result = self.invite_to_party(replied_user_id, inviter_id)
            self.bot.reply_to(message, result)
        
        @self.bot.callback_query_handler(func=lambda call: call.data.startswith("accept_invite"))
        def accept_invite_handler(call):
            """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–∏–Ω—è—Ç—å" –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ """
            _, party_name, user_id = call.data.split(":")
            user_id = int(user_id)
            
            if call.from_user.id != user_id:
                return self.bot.answer_callback_query(call.id, "‚ùå –≠—Ç–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –¥–ª—è –≤–∞—Å!")

            result = self.accept_invitation(party_name, user_id)
            self.bot.edit_message_text(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤ –ø–∞—Ä—Ç–∏—é **{party_name}**!",
                call.message.chat.id, call.message.message_id,
                parse_mode="Markdown"
            )
            self.bot.answer_callback_query(call.id, result)
        
        @self.bot.callback_query_handler(func=lambda call: call.data == "decline_invite")
        def decline_invite_handler(call):
            """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–∫–ª–æ–Ω–∏—Ç—å" –≤ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–∏ """
            self.bot.edit_message_text("‚ùå –í—ã –æ—Ç–∫–ª–æ–Ω–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø–∞—Ä—Ç–∏—é.", call.message.chat.id, call.message.message_id)
            self.bot.answer_callback_query(call.id, "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
            
        @self.bot.message_handler(func=lambda message: message.reply_to_message and message.text.lower() == "!–≤—ã–≥–Ω–∞—Ç—å")
        def remove_party_member_reply_handler(message):
            replied_user_id = message.reply_to_message.from_user.id
            party_creator_id = message.from_user.id
            
            party = self.database.find_party_id(party_creator_id)
            if not party:
                return self.bot.reply_to(message, "‚ùå –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –Ω–∏ –æ–¥–Ω–æ–π –ø–∞—Ä—Ç–∏–∏.")
            
            party_name = party["party_name"]
            result = self.remove_party_member(party_name, replied_user_id)
            self.bot.reply_to(message, result)
        
        @self.bot.message_handler(func=lambda message: message.text.lower().startswith("!–Ω–∞–π—Ç–∏"))
        def get_party_handler(message):
            parts = message.text.split(maxsplit=1)  # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if len(parts) != 2:
                return self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !–ø–∞—Ä—Ç–∏—è <–Ω–∞–∑–≤–∞–Ω–∏–µ_–ø–∞—Ä—Ç–∏–∏>")

            party_name = parts[1]  # –ë–µ—Ä—ë–º –≤—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ "!–ø–∞—Ä—Ç–∏—è"
            self.get_party(party_name, message)
            
        @self.bot.message_handler(func=lambda message: message.text.lower().startswith("!–≥—Ä–µ—á–∫–∞ –∫—É–ø–∏—Ç—å"))
        def buy_grechka_handler(message):
            parts = message.text.split(maxsplit=2)
            if len(parts) != 3:
                return self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !–≥—Ä–µ—á–∫–∞ –∫—É–ø–∏—Ç—å <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ>")

            try:
                amount = int(parts[2])
            except ValueError:
                return self.bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–µ—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

            party_creator_id = message.from_user.id
            result = self.buy_grechka(party_creator_id, amount)
            self.bot.reply_to(message, result)
            
        @self.bot.message_handler(func=lambda message: message.text.lower().startswith("!–≥—Ä–µ—á–∫–∞ —Ä–∞–∑–¥–∞—Ç—å"))
        def distribute_grechka_handler(message):
            """ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–∞–∑–¥–∞—á–∏ –≥—Ä–µ—á–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º """
            parts = message.text.split(maxsplit=2)
            if len(parts) != 3:
                return self.bot.reply_to(message, "‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: !—Ä–∞–∑–¥–∞—Ç—å –≥—Ä–µ—á–∫—É –≤—Å–µ–º <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_–Ω–∞_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>")

            try:
                amount_per_user = int(parts[2])
            except ValueError:
                return self.bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥—Ä–µ—á–∫–∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

            party_creator_id = message.from_user.id
            result = self.distribute_grechka_to_all(party_creator_id, amount_per_user)
            self.bot.reply_to(message, result)
                
        print("‚úÖ Party handlers are ready")